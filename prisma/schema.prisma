// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  password               String
  username               String    @unique
  role                   String    @default("USER")
  verificationToken      String?   @unique
  verificationTokenExpiry DateTime?
  isVerified            Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  walletAddress         String?
  store                 Store?    @relation(fields: [storeId], references: [id])
  storeId               String?
  storeAdmin            StoreAdmin?
  storeOwner            StoreOwner?
  endUser               EndUser?
}

model StoreOwner {
  id        String       @id @default(cuid())
  userId    String       @unique
  user      User         @relation(fields: [userId], references: [id])
  status    ApprovalStatus @default(pending)
  stores    Store[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model StoreAdmin {
  id        String       @id @default(cuid())
  userId    String       @unique
  user      User         @relation(fields: [userId], references: [id])
  storeId   String
  store     Store        @relation(fields: [storeId], references: [id])
  status    ApprovalStatus @default(pending)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model EndUser {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  loyaltyBalance Float    @default(0)
  preferredStore String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Store {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       StoreOwner @relation(fields: [ownerId], references: [id])
  admins      StoreAdmin[]
  products    Product[]
  walletAddress String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  storeId     String
  store       Store    @relation(fields: [storeId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  super_root_admin
  platform_admin
  store_owner
  store_admin
  end_user
}

enum ApprovalStatus {
  pending
  approved
  rejected
} 